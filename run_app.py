#!/usr/bin/env python3
"""
Aplica√ß√£o de Gest√£o de Apostas Desportivas - Vers√£o 2.0
Script de Inicializa√ß√£o Otimizado

Este script implementa as melhores pr√°ticas de inicializa√ß√£o:
- Verifica√ß√£o de depend√™ncias
- Configura√ß√£o de logging
- Tratamento de erros robusto
- Valida√ß√£o do ambiente
- Inicializa√ß√£o segura
- Inicializa√ß√£o dos m√≥dulos da Vers√£o 2.0

Autor: Sistema de Gest√£o de Apostas
Vers√£o: 2.0.0
Data: 2025
"""

import sys
import os
import logging
import traceback
from pathlib import Path
from typing import Optional, List
import json
from datetime import datetime
import time
import tkinter as tk
from tkinter import ttk
import threading

def safe_input(prompt: str = "") -> str:
    """
    Fun√ß√£o segura para input que funciona tanto em modo console quanto execut√°vel.
    
    Args:
        prompt: Mensagem a exibir
        
    Returns:
        String vazia se stdin n√£o estiver dispon√≠vel
    """
    try:
        # Verificar se stdin est√° dispon√≠vel
        if hasattr(sys.stdin, 'isatty') and sys.stdin.isatty():
            return input(prompt)
        else:
            # Em execut√°veis, apenas aguardar um tempo e retornar
            print(prompt)
            time.sleep(2)  # Aguardar 2 segundos
            return ""
    except (EOFError, OSError, RuntimeError):
        # Se houver erro com stdin, apenas aguardar e retornar
        print(prompt)
        time.sleep(2)
        return ""

# Configurar DPI awareness para Windows
if sys.platform.startswith('win'):
    try:
        import ctypes
        ctypes.windll.shcore.SetProcessDpiAwareness(1)  # PROCESS_DPI_AWARE
    except Exception:
        try:
            ctypes.windll.user32.SetProcessDPIAware()
        except Exception:
            pass  # Ignorar se n√£o conseguir configurar DPI awareness

# Configura√ß√£o de logging estruturado
# Criar diret√≥rio de logs se n√£o existir
os.makedirs('logs', exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/app_startup.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class LoadingScreen:
    """
    Tela de loading moderna e bonita com anima√ß√µes e design atrativo.
    """
    
    def __init__(self):
        self.root = None
        self.progress_var = None
        self.status_var = None
        self.progress_bar = None
        self.is_closed = False
        self.animation_running = False
        self.dots_count = 0
        
    def show(self):
        """Mostra a tela de loading moderna."""
        # Usar sempre a vers√£o tkinter padr√£o para maior estabilidade
        return self._show_simple_fallback()
    
    def _show_simple_fallback(self):
        """Vers√£o de fallback moderna usando tkinter padr√£o."""
        try:
            self.root = tk.Tk()
            self.root.title("Sistema de Apostas Desportivas")
            
            # Configurar geometria de forma segura
            width = 500
            height = 400
            
            # Obter dimens√µes da tela
            screen_width = self.root.winfo_screenwidth()
            screen_height = self.root.winfo_screenheight()
            
            # Calcular posi√ß√£o central
            x = (screen_width - width) // 2
            y = (screen_height - height) // 2
            
            # Definir geometria com posi√ß√£o espec√≠fica
            self.root.geometry(f"{width}x{height}+{x}+{y}")
            self.root.resizable(False, False)
            self.root.configure(bg='#1a1a2e')
            
            # Configurar √≠cone se dispon√≠vel
            try:
                icon_path = os.path.join(os.path.dirname(__file__), "icon.ico")
                if os.path.exists(icon_path):
                    self.root.iconbitmap(icon_path)
            except Exception:
                pass
            
            # Frame principal
            main_frame = tk.Frame(self.root, bg='#1a1a2e')
            main_frame.pack(fill='both', expand=True, padx=30, pady=30)
            
            # Logo/√çcone principal
            logo_label = tk.Label(
                main_frame,
                text="üéØ",
                font=('Arial', 48),
                fg='#00d4ff',
                bg='#1a1a2e'
            )
            logo_label.pack(pady=(20, 10))
            
            # T√≠tulo principal
            title_label = tk.Label(
                main_frame,
                text="Sistema de Gest√£o de Apostas",
                font=('Arial', 18, 'bold'),
                fg='white',
                bg='#1a1a2e'
            )
            title_label.pack(pady=(0, 5))
            
            # Subt√≠tulo
            subtitle_label = tk.Label(
                main_frame,
                text="Vers√£o 2.0 - Profissional",
                font=('Arial', 11),
                fg='#a0a0a0',
                bg='#1a1a2e'
            )
            subtitle_label.pack(pady=(0, 30))
            
            # Status com anima√ß√£o
            self.status_var = tk.StringVar()
            self.status_var.set("Inicializando")
            status_label = tk.Label(
                main_frame,
                textvariable=self.status_var,
                font=('Arial', 10),
                fg='#00d4ff',
                bg='#1a1a2e'
            )
            status_label.pack(pady=(0, 15))
            
            # Frame para barra de progresso
            progress_frame = tk.Frame(main_frame, bg='#1a1a2e')
            progress_frame.pack(pady=(0, 10))
            
            # Barra de progresso
            self.progress_var = tk.DoubleVar()
            style = ttk.Style()
            style.theme_use('clam')
            style.configure('Custom.Horizontal.TProgressbar',
                          background='#00d4ff',
                          troughcolor='#2a2a3e',
                          borderwidth=0,
                          lightcolor='#00d4ff',
                          darkcolor='#00d4ff')
            
            self.progress_bar = ttk.Progressbar(
                progress_frame,
                variable=self.progress_var,
                maximum=100,
                length=350,
                mode='determinate',
                style='Custom.Horizontal.TProgressbar'
            )
            self.progress_bar.pack()
            
            # Label de porcentagem
            self.percent_var = tk.StringVar()
            self.percent_var.set("0%")
            percent_label = tk.Label(
                main_frame,
                textvariable=self.percent_var,
                font=('Arial', 10, 'bold'),
                fg='white',
                bg='#1a1a2e'
            )
            percent_label.pack(pady=(10, 20))
            
            # Informa√ß√£o adicional
            info_label = tk.Label(
                main_frame,
                text="Carregando m√≥dulos e configura√ß√µes...",
                font=('Arial', 9),
                fg='#808080',
                bg='#1a1a2e'
            )
            info_label.pack(pady=(0, 20))
            
            # Iniciar anima√ß√£o dos pontos
            self._start_dots_animation()
            
            # Mostrar janela e trazer para frente
            self.root.deiconify()
            self.root.lift()
            self.root.attributes('-topmost', True)
            self.root.after(100, lambda: self.root.attributes('-topmost', False))
            self.root.update()
            return True
            
        except Exception as e:
            logger.error(f"Erro ao criar tela de loading fallback: {e}")
            return False
    
    def _start_dots_animation(self):
        """Inicia anima√ß√£o dos pontos no status."""
        if not self.is_closed and self.root:
            self.animation_running = True
            self._animate_dots()
    
    def _animate_dots(self):
        """Anima os pontos no texto de status."""
        if not self.animation_running or self.is_closed or not self.root:
            return
            
        try:
            current_text = self.status_var.get()
            # Remove pontos existentes
            base_text = current_text.rstrip('.')
            
            # Adiciona pontos (0 a 3)
            self.dots_count = (self.dots_count + 1) % 4
            new_text = base_text + '.' * self.dots_count
            
            self.status_var.set(new_text)
            
            # Agendar pr√≥xima anima√ß√£o
            self.root.after(500, self._animate_dots)
            
        except Exception:
            pass
    
    def update_progress(self, value, status=""):
        """Atualiza o progresso da barra de loading."""
        if self.root and not self.is_closed:
            try:
                # Atualizar barra de progresso (CustomTkinter usa valores de 0 a 1)
                if hasattr(self.progress_bar, 'set'):
                    # CustomTkinter ProgressBar
                    self.progress_bar.set(value / 100.0)
                else:
                    # Tkinter Progressbar (fallback)
                    self.progress_var.set(value)
                
                # Atualizar porcentagem
                self.percent_var.set(f"{int(value)}%")
                
                # Atualizar status
                if status:
                    # Parar anima√ß√£o temporariamente para mostrar status espec√≠fico
                    self.animation_running = False
                    self.status_var.set(status)
                    # Reiniciar anima√ß√£o ap√≥s um tempo
                    if value < 100:
                        self.root.after(1000, self._restart_animation)
                
                self.root.update()
            except Exception as e:
                logger.error(f"Erro ao atualizar progresso: {e}")
    
    def _restart_animation(self):
        """Reinicia a anima√ß√£o dos pontos."""
        if not self.is_closed and self.root:
            self.animation_running = True
            self._animate_dots()
    
    def close(self):
        """Fecha a tela de loading."""
        if self.root and not self.is_closed:
            try:
                self.is_closed = True
                self.animation_running = False  # Parar anima√ß√£o
                self.root.destroy()
                self.root = None
            except Exception as e:
                logger.error(f"Erro ao fechar tela de loading: {e}")

class AppInitializer:
    """
    Classe respons√°vel pela inicializa√ß√£o segura da aplica√ß√£o.
    
    Implementa verifica√ß√µes de pr√©-requisitos, configura√ß√£o do ambiente
    e inicializa√ß√£o dos componentes principais.
    """
    
    def __init__(self):
        # Determinar diret√≥rio da aplica√ß√£o corretamente para execut√°veis PyInstaller
        if getattr(sys, 'frozen', False):
            # Execut√°vel PyInstaller - usar diret√≥rio do execut√°vel
            self.app_dir = Path(sys.executable).parent
        else:
            # Execu√ß√£o normal do Python - usar diret√≥rio do script
            self.app_dir = Path(__file__).parent
        self.required_modules = [
            'customtkinter',
            'pandas',
            'matplotlib',
            'cryptography',
            'reportlab'
        ]
        self.optional_modules_v2 = [
            'flask',
            'scikit-learn',
            'kivy',
            'bcrypt',
            'PyJWT'
        ]
        self.required_files = [
            'interface.py',
            'apostas.db',
            'requirements.txt'
        ]
        self.optional_files_v2 = [
            'usuarios.py',
            'autenticacao.py',
            'api_mobile.py',
            'ml_previsoes.py',
            # Ficheiros de gamifica√ß√£o removidos
        ]
        
    def verificar_python_version(self) -> bool:
        """
        Verifica se a vers√£o do Python √© compat√≠vel.
        
        Returns:
            bool: True se a vers√£o for compat√≠vel
        """
        version_info = sys.version_info
        if version_info.major < 3 or (version_info.major == 3 and version_info.minor < 8):
            logger.error(f"Python 3.8+ √© necess√°rio. Vers√£o atual: {sys.version}")
            return False
        
        logger.info(f"‚úÖ Python {sys.version} - Compat√≠vel")
        return True
    
    def verificar_dependencias(self) -> bool:
        """
        Verifica se todas as depend√™ncias est√£o instaladas.
        
        Returns:
            bool: True se todas as depend√™ncias estiverem dispon√≠veis
        """
        missing_modules = []
        
        # Verificar m√≥dulos obrigat√≥rios
        for module in self.required_modules:
            try:
                __import__(module)
                logger.info(f"‚úÖ M√≥dulo {module} - Dispon√≠vel")
            except ImportError:
                missing_modules.append(module)
                logger.error(f"‚ùå M√≥dulo {module} - N√£o encontrado")
        
        # Verificar m√≥dulos opcionais da v2.0
        for module in self.optional_modules_v2:
            try:
                __import__(module)
                logger.info(f"‚úÖ M√≥dulo {module} - Dispon√≠vel (v2.0)")
            except ImportError:
                logger.info(f"‚ÑπÔ∏è M√≥dulo {module} - N√£o encontrado (funcionalidade v2.0 n√£o dispon√≠vel)")
        
        if missing_modules:
            logger.error(f"M√≥dulos em falta: {', '.join(missing_modules)}")
            logger.info("Execute: pip install -r requirements.txt")
            return False
        
        return True
    
    def verificar_arquivos(self) -> bool:
        """
        Verifica se todos os arquivos necess√°rios existem.
        
        Returns:
            bool: True se todos os arquivos estiverem presentes
        """
        missing_files = []
        
        # Verificar arquivos obrigat√≥rios
        for file_name in self.required_files:
            # Para execut√°veis PyInstaller, procurar primeiro na pasta _internal
            if getattr(sys, 'frozen', False):
                file_path = self.app_dir / '_internal' / file_name
                if not file_path.exists():
                    file_path = self.app_dir / file_name
            else:
                file_path = self.app_dir / file_name
                
            if file_path.exists():
                logger.info(f"‚úÖ Arquivo {file_name} - Encontrado")
            else:
                missing_files.append(file_name)
                logger.error(f"‚ùå Arquivo {file_name} - N√£o encontrado")
        
        # Verificar arquivos opcionais da v2.0
        for file_name in self.optional_files_v2:
            # Para execut√°veis PyInstaller, procurar primeiro na pasta _internal
            if getattr(sys, 'frozen', False):
                file_path = self.app_dir / '_internal' / file_name
                if not file_path.exists():
                    file_path = self.app_dir / file_name
            else:
                file_path = self.app_dir / file_name
                
            if file_path.exists():
                logger.info(f"‚úÖ Arquivo {file_name} - Encontrado (v2.0)")
            else:
                logger.info(f"‚ÑπÔ∏è Arquivo {file_name} - N√£o encontrado (funcionalidade v2.0 n√£o dispon√≠vel)")
        
        if missing_files:
            logger.error(f"Arquivos em falta: {', '.join(missing_files)}")
            return False
        
        return True
    
    def criar_diretorios(self) -> bool:
        """
        Cria diret√≥rios necess√°rios se n√£o existirem.
        
        Returns:
            bool: True se todos os diret√≥rios foram criados/verificados
        """
        directories = ['logs', 'exports', 'backups', 'data', 'traducoes', 'temas']
        
        try:
            for dir_name in directories:
                # Para execut√°veis PyInstaller, criar diret√≥rios no diret√≥rio do execut√°vel
                dir_path = self.app_dir / dir_name
                dir_path.mkdir(exist_ok=True)
                logger.info(f"‚úÖ Diret√≥rio {dir_name} - Verificado")
            return True
        except Exception as e:
            logger.error(f"Erro ao criar diret√≥rios: {e}")
            return False
    
    def verificar_configuracoes(self) -> bool:
        """
        Verifica e cria configura√ß√µes padr√£o se necess√°rio.
        
        Returns:
            bool: True se as configura√ß√µes est√£o v√°lidas
        """
        try:
            # Verificar configura√ß√£o de idioma
            config_idioma_path = self.app_dir / 'config_idioma.json'
            if not config_idioma_path.exists():
                config_idioma = {
                    'idioma_atual': 'pt',
                    'idiomas_disponiveis': ['pt', 'en', 'es']
                }
                with open(config_idioma_path, 'w', encoding='utf-8') as f:
                    json.dump(config_idioma, f, indent=2, ensure_ascii=False)
                logger.info("‚úÖ Configura√ß√£o de idioma criada")
            
            # Verificar configura√ß√£o de temas
            config_temas_path = self.app_dir / 'config_temas.json'
            if not config_temas_path.exists():
                config_temas = {
                    'tema_atual': 'Claro Padr√£o',
                    'temas_personalizados': []
                }
                with open(config_temas_path, 'w', encoding='utf-8') as f:
                    json.dump(config_temas, f, indent=2, ensure_ascii=False)
                logger.info("‚úÖ Configura√ß√£o de temas criada")
            
            return True
        except Exception as e:
            logger.error(f"Erro ao verificar configura√ß√µes: {e}")
            return False
    
    def log_system_info(self) -> None:
        """
        Registra informa√ß√µes do sistema para diagn√≥stico.
        """
        logger.info("=" * 50)
        logger.info("INFORMA√á√ïES DO SISTEMA")
        logger.info("=" * 50)
        logger.info(f"Sistema Operacional: {os.name}")
        logger.info(f"Plataforma: {sys.platform}")
        logger.info(f"Vers√£o Python: {sys.version}")
        logger.info(f"Diret√≥rio da Aplica√ß√£o: {self.app_dir}")
        logger.info(f"Data/Hora de Inicializa√ß√£o: {datetime.now()}")
        logger.info("=" * 50)
    
    def inicializar(self, loading_screen=None) -> bool:
        """
        Executa todas as verifica√ß√µes e inicializa√ß√µes necess√°rias.
        
        Args:
            loading_screen: Inst√¢ncia do ecr√£ de loading (opcional)
        
        Returns:
            bool: True se a inicializa√ß√£o foi bem-sucedida
        """
        logger.info("üöÄ Iniciando Aplica√ß√£o de Gest√£o de Apostas Desportivas v2.0")
        
        if loading_screen:
            loading_screen.update_progress(5, "Registando informa√ß√µes do sistema...")
            time.sleep(0.2)
        
        self.log_system_info()
        
        # Sequ√™ncia de verifica√ß√µes com progresso
        checks = [
            ("Vers√£o do Python", self.verificar_python_version, 15, "Verificando vers√£o do Python..."),
            ("Depend√™ncias", self.verificar_dependencias, 35, "Carregando depend√™ncias..."),
            ("Arquivos necess√°rios", self.verificar_arquivos, 55, "Verificando base de dados..."),
            ("Diret√≥rios", self.criar_diretorios, 70, "Criando estrutura de pastas..."),
            ("Configura√ß√µes", self.verificar_configuracoes, 85, "Carregando configura√ß√µes...")
        ]
        
        for check_name, check_func, progress, status in checks:
            if loading_screen:
                loading_screen.update_progress(progress, status)
                time.sleep(0.3)
            
            logger.info(f"üîç Verificando: {check_name}")
            if not check_func():
                logger.error(f"‚ùå Falha na verifica√ß√£o: {check_name}")
                return False
            logger.info(f"‚úÖ {check_name} - OK")
        
        if loading_screen:
            loading_screen.update_progress(95, "Finalizando inicializa√ß√£o...")
            time.sleep(0.2)
        
        logger.info("‚úÖ Todas as verifica√ß√µes passaram!")
        return True
    
    def inicializar_modulos_v2(self) -> None:
        """
        Inicializa os m√≥dulos da Vers√£o 2.0 se dispon√≠veis.
        """
        try:
            # Inicializar sistema de usu√°rios
            if (self.app_dir / 'usuarios.py').exists():
                logger.info("üîß Inicializando sistema de usu√°rios...")
                from usuarios import gestor_utilizadores
                gestor_utilizadores.inicializar_base_dados()
                logger.info("‚úÖ Sistema de usu√°rios inicializado")
            
            # Sistema de gamifica√ß√£o removido
            
            # Verificar disponibilidade da API mobile
            if (self.app_dir / 'api_mobile.py').exists():
                logger.info("üì± API Mobile dispon√≠vel")
            
            # Verificar disponibilidade do ML
            if (self.app_dir / 'ml_previsoes.py').exists():
                logger.info("ü§ñ Sistema de ML dispon√≠vel")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao inicializar m√≥dulos v2.0: {e}")
            # N√£o √© cr√≠tico, continuar execu√ß√£o
    
    def executar_aplicacao(self) -> None:
        """
        Executa a aplica√ß√£o principal.
        """
        try:
            logger.info("üéØ Carregando interface principal...")
            
            # Inicializar m√≥dulos da Vers√£o 2.0
            self.inicializar_modulos_v2()
            
            # Importar e executar a interface
            from interface import ApostasApp
            
            logger.info("‚úÖ Interface carregada com sucesso")
            logger.info("üéâ Aplica√ß√£o iniciada!")
            
            # Criar e executar a aplica√ß√£o
            app = ApostasApp()
            app.run()
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao executar aplica√ß√£o: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise

def main() -> int:
    """
    Fun√ß√£o principal de entrada da aplica√ß√£o.
    
    Returns:
        int: C√≥digo de sa√≠da (0 = sucesso, 1 = erro)
    """
    loading_screen = None
    
    try:
        # Criar e mostrar ecr√£ de loading
        loading_screen = LoadingScreen()
        if loading_screen.show():
            loading_screen.update_progress(5, "Inicializando sistema...")
            time.sleep(0.3)
        else:
            loading_screen = None
        
        # Criar inicializador
        if loading_screen:
            loading_screen.update_progress(15, "Verificando depend√™ncias...")
            time.sleep(0.2)
        
        initializer = AppInitializer()
        
        # Executar inicializa√ß√£o com loading screen
        if not initializer.inicializar(loading_screen):
            if loading_screen:
                loading_screen.close()
            logger.error("‚ùå Falha na inicializa√ß√£o da aplica√ß√£o")
            safe_input("Pressione Enter para sair...")
            return 1
        
        # Carregar m√≥dulos
        if loading_screen:
            loading_screen.update_progress(85, "Carregando m√≥dulos...")
            time.sleep(0.3)
        
        # Preparar interface
        if loading_screen:
            loading_screen.update_progress(95, "Preparando interface...")
            time.sleep(0.2)
        
        # Finalizar loading screen
        if loading_screen:
            loading_screen.update_progress(100, "Carregamento conclu√≠do!")
            time.sleep(0.5)
            loading_screen.close()
        
        # Executar aplica√ß√£o
        initializer.executar_aplicacao()
        
        logger.info("üëã Aplica√ß√£o encerrada normalmente")
        return 0
        
    except KeyboardInterrupt:
        if loading_screen:
            loading_screen.close()
        logger.info("‚ö†Ô∏è Aplica√ß√£o interrompida pelo usu√°rio")
        return 0
    except Exception as e:
        if loading_screen:
            loading_screen.close()
        logger.error(f"üí• Erro cr√≠tico: {e}")
        logger.error(f"Traceback completo: {traceback.format_exc()}")
        safe_input("Pressione Enter para sair...")
        return 1

if __name__ == "__main__":
    # Configurar encoding para Windows
    if sys.platform.startswith('win'):
        import locale
        try:
            locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
        except locale.Error:
            try:
                locale.setlocale(locale.LC_ALL, 'Portuguese_Brazil.1252')
            except locale.Error:
                pass  # Usar configura√ß√£o padr√£o
    
    # Executar aplica√ß√£o
    exit_code = main()
    sys.exit(exit_code)